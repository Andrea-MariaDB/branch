@using Branch.App.Areas.Reach.Models
@using Branch.App.Helpers.Razor
@using Branch.App.Helpers.Razor.Reach
@using Branch.Core.Game.HaloReach.Enums
@using Branch.Core.Game.HaloReach.Models._343.DataModels
@model GameViewModel
@{
	var game = Model.Game.GameDetails;
	var orderedPlayers = game.Players.OrderBy(p => p.Standing).ThenByDescending(p => p.Score);
	var topPlayer = orderedPlayers.First();
	IList<Team> orderedTeams = null;
	if (game.Teams != null)
	{
		orderedTeams = game.Teams.OrderByDescending(t => t.Standing).Reverse().ToList();
	}
}

<div class="cover" style="background-image: url('@AssetUrlHelpers.GetMapImageUrl(game.BaseMapName)');">
	<div class="mask">
		<div class="inner">
			<div class="title">
				<h2>@game.GameVariantName</h2>
				<p>
					@BranchHelpers.MakeDateTimeFriendly(game.GameTimestamp, "d") | @game.GameDuration
				</p>
			</div>

			<div class="map">
				on
				<br />
				<span class="focus">
					@game.MapName
				</span>
			</div>

			<div class="game-icon" style="background-image: url('@AssetUrlHelpers.GetIconImageUrl(game.GameVariantIcon, AssetSize.Large)')"></div>

			<div class="seperator"></div>

			<div class="victor">
				@if (orderedTeams != null && orderedTeams.Any())
				{
					var modifier = (orderedTeams[orderedTeams.Count() - 1].Score / 75f);
					if (Math.Abs(modifier) < 0.01)
					{
						modifier = 1;
					}
					var width = (50 + (5 * 2)) * game.Teams.Count();

					<div class="team-score-bollards" style="width: @(width)px;">
						@foreach (var team in orderedTeams.Reverse())
						{
							<div class="score-bollard">
								<div class="height-mask" style="height: @(team.Score / modifier)px; margin-top: @(75 - (team.Score / modifier))px; background-color: @MetadataHelpers.GetTeamColour(team.Index);"></div>
								<div class="score">
									@team.Score
								</div>
							</div>
						}
						<div class="clearfix"></div>
					</div>
				}
				else
				{
					<div class="ffa-victor">
						@if (topPlayer.IsGuest)
						{
							<strong>@topPlayer.PlayerDetail.Gamertag</strong>
						}
						else
						{
							@Html.ActionLink(@topPlayer.PlayerDetail.Gamertag, "Index", "ServiceRecord", new RouteValueDictionary { { "gamertag", topPlayer.PlayerDetail.Gamertag } }, new { @class = "alt" })
						}
						led the game with a personal score of @topPlayer.Score, and a K/D of @MathHelpers.CalculateKd(topPlayer.Kills, topPlayer.Deaths)
					</div>
				}
			</div>
		</div>
	</div>
	<div class="victor-player-model hidden-xs" style="background-image: url('@AssetUrlHelpers.GetPlayerModelUrl(topPlayer.PlayerDetail.Gamertag, AssetSize.Medium)')"></div>
</div>