@using Branch.App.Areas.Reach.Models
@using Branch.App.Helpers.Cryptography
@using Branch.App.Helpers.Razor
@using Branch.App.Helpers.Razor.Reach
@using Branch.Core.Game.HaloReach.Enums
@using Branch.Core.Game.HaloReach.Models._343.DataModels
@model GameDetailsTeamViewModel
@{
	var team = Model.Team ?? new Team
	{
		Index = -1
	};
	var players = Model.Players;
	var teamColour = MetadataHelpers.GetTeamColour(team.Index);
	var teamName = MetadataHelpers.GetTeamName(team.Index);
}

<div class="team col-md-12" style="border-color: @teamColour;">
	<div class="col-md-12 header">
		<div class="row">
			<div class="col-md-5 team-indicator">
				@teamName
			</div>
			<div class="col-md-1 score-indicator check-dat-paddin hidden-xs hidden-sm">Score</div>
			<div class="col-md-1 kills-indicator check-dat-paddin hidden-xs hidden-sm">Kills</div>
			<div class="col-md-1 deaths-indicator check-dat-paddin hidden-xs hidden-sm">Deaths</div>
			<div class="col-md-2 kd-indicator check-dat-paddin hidden-xs hidden-sm">K/D Ratio</div>
			<div class="col-md-1 assists-indicator check-dat-paddin hidden-xs hidden-sm">Assists</div>
		</div>
	</div>

	<div class="team-players">
		@foreach (var player in players)
		{
			var ident = Sha1Crypto.ComputeHashToString(player.PlayerDetail.Gamertag).Remove(8);
			<div class="col-md-12" id="@ident" style="border-color: @teamColour;">
				<div class="desktop-view hidden-xs hidden-sm row">
					<div class="col-md-1 expander-indicator">
						<div class="expander-positioner">
							<a href="#" class="player-details-expander btn btn-default btn-large glyphicon glyphicon-chevron-down" data-ref="@ident"></a>
						</div>
					</div>
					@if (player.IsGuest)
					{
						<div class="col-md-1 visual-flair" style="background-color: @teamColour; background-image: url('http://emblems.svc.halowaypoint.com/h4/emblems/violet_117-on-recruit?size=48');"></div>
					}
					else
					{
						<div class="col-md-1 visual-flair" style="background-color: @teamColour; background-image: url(@AssetUrlHelpers.GetEmblemUrl(player.PlayerEmblemUrl, 48));"></div>
					}

					<div class="col-md-3 alphabetical-flair">
						@if (player.IsGuest)
						{
							@player.PlayerDetail.Gamertag
							<br /><strong>GEST</strong>
						}
						else
						{
							@Html.ActionLink(player.PlayerDetail.Gamertag, "Index", "ServiceRecord", new { gamertag = player.PlayerDetail.Gamertag }, new Dictionary<string, object>())
							<br />
							<strong>@player.PlayerDetail.ServiceTag</strong>
						}
					</div>
					<div class="col-md-1 score-indicator check-dat-paddin">
						@player.Score
					</div>
					<div class="col-md-1 kills-indicator check-dat-paddin">
						@player.Kills
					</div>
					<div class="col-md-1 deaths-indicator check-dat-paddin">
						@player.Deaths
					</div>
					<div class="col-md-2 kd-indicator check-dat-paddin">
						@MathHelpers.CalculateKd(player.Kills, player.Deaths)
					</div>
					<div class="col-md-1 assists-indicator check-dat-paddin">
						@player.Assists
					</div>
				</div>
				<div class="mobile-view visible-xs visible-sm row">
					<div class="expander-indicator">
						<div class="player-details-expander" data-ref="@ident">
							<div class="player-indicator">
								@if (player.IsGuest)
								{
									<div class="col-md-1 visual-flair" style="background-color: @teamColour; background-image: url('http://emblems.svc.halowaypoint.com/h4/emblems/violet_117-on-recruit?size=48');">
										@player.PlayerDetail.Gamertag
										<br />
										<strong>GEST</strong>
									</div>
								}
								else
								{
									<div class="col-md-1 visual-flair" style="background-color: @teamColour; background-image: url(@AssetUrlHelpers.GetEmblemUrl(player.PlayerEmblemUrl, 48));">
										@player.PlayerDetail.Gamertag
										<br />
										<strong>@player.PlayerDetail.ServiceTag</strong>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
				<div class="player-data collapsed" style="display: none;">
					<ul class="nav nav-tabs" style="margin-bottom: 15px;">
						<li class="active">
							<a id="tab-summary" href="#@ident-summary" data-toggle="tab">Summary</a>
						</li>
						<li>
							<a id="tab-weapons" href="#@ident-weapons" data-toggle="tab">Weapons</a>
						</li>
						@if (player.MedalsOverTime.Any())
						{
							<li>
								<a id="tab-medals" href="#@ident-medals" data-toggle="tab">Medals</a>
							</li>
						}
						@if (player.AiEventAggregates.Any())
						{
							<li>
								<a id="tab-enemy" href="#@ident-enemys" data-toggle="tab">Enemies</a>
							</li>
						}
					</ul>

					<div class="player-stats tab-content">
						<div class="tab-pane fade in active summary" id="@ident-summary">
							<div class="row">
								<div class="col-md-6 hidden-sm hidden-xs player-model" style="background-image: url('@AssetUrlHelpers.GetPlayerModelUrl(player.PlayerDetail.Gamertag, AssetSize.Large)')"></div>
								<div class="col-md-6">
									@if (player.IsGuest)
									{
										<h2>@player.PlayerDetail.Gamertag</h2>
										<h3 class="player-servicetag">GEST</h3>
									}
									else
									{
										<h2>
											@Html.ActionLink(player.PlayerDetail.Gamertag, "Index", "ServiceRecord",
												 new { gamertag = player.PlayerDetail.Gamertag }, new Dictionary<string, object>())
										</h2>
										<h3 class="player-servicetag">@player.PlayerDetail.ServiceTag</h3>
									}
									<hr />

									<h2>
										Score
									</h2>
									<ul class="list-group">
										<li class="list-group-item">
											<span class="badge">@player.Score</span>
											Personal Score
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Kills</span>
											Kills
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Deaths</span>
											Deaths
										</li>
										<li class="list-group-item">
											<span class="badge">@MathHelpers.CalculateKd(@player.Kills, @player.Deaths)</span>
											K/D Ratio
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Assists</span>
											Assists
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalMedalCount</span>
											Medals
										</li>
										<li class="list-group-item">
											<span class="badge">@(player.Betrayals + player.Suicides)</span>
											Penalities (Betrayals, Suicides, etc)
										</li>
									</ul>
									<hr />

									<h2>
										Meta
									</h2>
									<ul class="list-group">
										@if (player.PlayerKilledMost != null)
										{
											<li class="list-group-item">
												<span class="badge">
													@if (player.PlayerKilledMost == GeneralHelpers.RemoveGuestIdentifier(player.PlayerKilledMost))
													{
														// Not a Guest
														@Html.ActionLink(player.PlayerKilledMost, "Index", "ServiceRecord", new { gamertag = player.PlayerKilledMost }, new Dictionary<string, object>())
													}
													else
													{
														@player.PlayerKilledMost
													}
													(@player.KilledMostCount)
												</span>
												Most Killed
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">Nobody</span>
												Most Killed
											</li>
										}
										@if (player.PlayerKilledByMost != null)
										{
											<li class="list-group-item">
												<span class="badge">
													@if (player.PlayerKilledByMost == GeneralHelpers.RemoveGuestIdentifier(player.PlayerKilledByMost))
													{
														// Not a Guest
														@Html.ActionLink(player.PlayerKilledByMost, "Index", "ServiceRecord", new { gamertag = player.PlayerKilledByMost }, new Dictionary<string, object>())
													}
													else
													{
														@player.PlayerKilledByMost
													}
													(@player.PlayerKilledByMost)
												</span>
												Most Killed By
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">Nobody</span>
												Most Killed By
											</li>
										}
										<li class="list-group-item">
											<span class="badge">@MathHelpers.RoundTo(player.AvgKillDistanceMeters, 2) Meters</span>
											Average Kill Distance
										</li>
										<li class="list-group-item">
											<span class="badge">@MathHelpers.RoundTo(player.AvgDeathDistanceMeters, 2) Meters</span>
											Average Death Distance
										</li>
									</ul>
									<hr />
								</div>

								<div class="col-md-6">
									<h2>
										Medals
									</h2>
									<ul class="list-group">
										<li class="list-group-item">
											<span class="badge">@player.UniqueMultiMedalCount</span>
											Unique Multikill Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.UniqueSpreeMedalCount</span>
											Unique Spree Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.UniqueStyleMedalCount</span>
											Unique Style Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.UniqueOtherMedalCount</span>
											Unique Other Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.UniqueTotalMedalCount</span>
											Unique Total Medals Earned
										</li>
									</ul>
								</div>
								<div class="col-md-6">
									<h2>
										Player
									</h2>
									<ul class="list-group">
										@if (player.PlayerDetail.CurrentRankName == null)
										{
											<li class="list-group-item">
												<span class="badge">n/a</span>
												Rank
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">@player.PlayerDetail.CurrentRankName</span>
												Rank
											</li>
										}
										<li class="list-group-item">
											<span class="badge">
												@(player.DidNotFinish ? "Did not Finish" : "Finished the Fight")
											</span>
											Completion Style
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Standing</span>
											Standing
										</li>
									</ul>
								</div>
							</div>
						</div>
						<div class="tab-pane fade in weapons" id="@ident-weapons">
							@{
								var weaponGraphIdent = string.Format("player-weapons-{0}", ident);
							}
							<div class="graph-container hidden-xs">
								<!-- Graphs Will Return! - maybe not, it's been 12 months -->
								<div id="@weaponGraphIdent" style="height: 250px; width: 700px; display: none;"></div>
							</div>

							<h2>All Weapons</h2>
							<hr />
							<table class="table weapons">
								<thead>
									<tr>
										<th>Weapon</th>
										<th>Kills</th>
										<th>Headshots</th>
										<th>Deaths</th>
										<th>Penalties</th>
										<th>Spread</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var weaponCarnageReport in player.WeaponCarnageReport.OrderByDescending(r => MathHelpers.CalculateSpread(r.Kills, r.Deaths, new[] { r.Penalties })))
									{
										var weaponMetadata = MetadataHelpers.GetWeaponDetailsById(weaponCarnageReport.WeaponId);
										<tr>
											<td>
												<a href="#" role="tooltip" title="@weaponMetadata.OfficialName">
													<img alt="@weaponMetadata.OfficialName"
														 src="@AssetUrlHelpers.GetWeaponUrl(weaponMetadata.ImageName)" />
												</a>
											</td>
											<td>
												@weaponCarnageReport.Kills
											</td>
											<td>
												@weaponCarnageReport.Headshots
											</td>
											<td>
												@weaponCarnageReport.Deaths
											</td>
											<td>
												@weaponCarnageReport.Penalties
											</td>
											<td>
												@MathHelpers.CalculateSpread(weaponCarnageReport.Kills, weaponCarnageReport.Deaths, new[] { weaponCarnageReport.Penalties })
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
						@if (player.MedalsOverTime.Any())
						{
							<div class="tab-pane fade in medals" id="@ident-medals">
								@{
									var medalGraphIdent = string.Format("player-medals-{0}", ident);
								}
								<div class="graph-container hidden-xs">
									<!-- Graphs Will Return! - maybe? -->
									<div id="@medalGraphIdent" style="height: 250px; width: 700px; display: none;"></div>
								</div>

								<!-- Medal View Data Processing -->
								@{
									var sortedMedalCounts = player.SpecificMedalCounts.OrderByDescending(c => c.Value);
								}

								@if (sortedMedalCounts.Any())
								{
									<h2>All Medals</h2>
									<hr />
									<div class="row" id="all-medals">
										<div id="player-medals">
											@foreach (var medal in sortedMedalCounts)
											{
												var medalDetails = MetadataHelpers.GetMedalDetailsById(int.Parse(medal.Key));
												<div class="col-md-12 medal-entry row">
													<div class="medal" style="background-image: url('@AssetUrlHelpers.GetMedalUrl(medalDetails.ImageName)')"></div>
													<div class="description">
														<span class="name">@medalDetails.Name</span>
														<br />
														@medalDetails.Description
													</div>
													<div class="count">
														<span class="integer">@medal.Value</span>
														<br />
														<span class="in-dick-ator">earned</span>
													</div>
												</div>
												<hr />
											}
										</div>
									</div>
								}
							</div>
						}
						@if (player.AiEventAggregates.Any())
						{
							<div class="tab-pane fade in enemies" id="@ident-enemys">
								@{
									var enemyGraphIdent = string.Format("player-enemy-{0}", ident);
								}
								<div class="graph-container hidden-xs">
									<!-- Graphs Will Return! -->
									<div id="@enemyGraphIdent" style="height: 250px; width: 700px; display: none;"></div>
								</div>

								<h2>All Enemies</h2>
								<hr />

								<div class="row">
									@foreach (var enemyStat in player.AiEventAggregates.OrderByDescending(ai => ai.Value.Points).Select(ai => ai.Value))
									{
										var enemyUuid = string.Format("{0}-{1:X}", ident, enemyStat.AiTypeClass);
										var enemy = MetadataHelpers.GetEnemyDetailsById(enemyStat.AiTypeClass);

										<div class="col-md-12 enemy-entry row">
											<div class="enemy-image col-md-2" style="background-image: url('@AssetUrlHelpers.GetEnemyUrl(enemy.ImageName)')"></div>
											<div class="enemy-content col-md-8">
												<span class="name">@enemy.Name</span>
												<ul class="nav nav-tabs" style="margin-top: 15px;">
													<li class="active">
														<a id="tab-stats" href="#@enemyUuid-stats" data-toggle="tab">Stats</a>
													</li>
													<li>
														<a id="tab-info" href="#@enemyUuid-info" data-toggle="tab">Information</a>
													</li>
												</ul>
												<div class="enemy-stats tab-content">
													<div class="tab-pane fade in active statistics" id="@enemyUuid-stats">
														<span>
															<strong>
																Kills:
															</strong>
															@enemyStat.PlayerKilledAiCount
														</span>
														<br />
														<span>
															<strong>
																Deaths:
															</strong>
															@enemyStat.PlayerKilledByAiCount
														</span>
														<br />
														<span>
															<strong>
																Average Kill Distance:
															</strong>
															@MathHelpers.RoundTo(enemyStat.PlayerKilledAiAverageDistanceInMeters, 2) Meters
														</span>
														<br />
														<span>
															<strong>
																Average Death Distance:
															</strong>
															@MathHelpers.RoundTo(enemyStat.PlayerKilledByAiAverageDistanceInMeters, 2) Meters
														</span>
													</div>
													<div class="tab-pane fade in information" id="@enemyUuid-info">
														<span>
															<strong>
																Name:
															</strong>
															@enemy.Name
														</span>
														<br />
														<span>
															<strong>
																Description:
															</strong>
															@enemy.Description
														</span>
													</div>
												</div>
											</div>
											<div class="count hidden-xs hidden-sm col-md-2">
												<span class="integer">@enemyStat.PlayerKilledAiCount</span>
												<br />
												<span class="in-dick-ator">killed</span>
											</div>
										</div>
										<hr />
									}
								</div>
							</div>
						}
					</div>
				</div>

			</div>
		}
	</div>
</div>