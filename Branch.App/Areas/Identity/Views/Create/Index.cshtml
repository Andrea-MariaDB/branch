@using Branch.App.Areas.Identity.Models
@model CreateIdentityViewModel
@{
	ViewBag.Title = "Create Account";
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Template = "identity";
}

@Html.Partial("IdentityHeader", new HeaderMetadata("Join Branch", "And get access to shit I have yet to think of."))

<div class="container">
	@using (Html.BeginForm("Index", "Create", FormMethod.Post))
	{
		@Html.AntiForgeryToken()
		<div class="container heads-up">
			<div class="row col-md-10 col-md-offset-1">
				<div class="col-md-12 panel panel-default">
					<div class="panel-body details">
						@if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
						{
							<section class="bs-callout bs-callout-danger">
								<h4>Validation Errors</h4>
								@Html.ValidationSummary(true)
							</section>
						}

						<section class="input-section full-name-section row">
							<div class="col-md-6">
								<span class="title">Full Name</span>
								<p>
									<span class="tier">
										Optional
									</span>
									Make Branch more personal
								</p>
								<div class="input-group">
									<span class="input-group-addon">@@</span>
									@Html.TextBoxFor(v => v.FullName, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "FullName"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "FullName").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Name</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.FullName)
											</p>
										</div>
									}
								}
							</div>
						</section>

						<section class="input-section username-section row">
							<div class="col-md-6">
								<span class="title">Username</span>
								<p>
									<span class="tier">
										Required
									</span>
									Your name that will appear in branch. You can't change this, so make it count.
								</p>
								<div class="input-group">
									<span class="input-group-addon">@@</span>
									@Html.TextBoxFor(v => v.Username, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "Username"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "Username").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Username</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.Username)
											</p>
										</div>
									}
								}
							</div>
						</section>

						<section class="input-section email-section row">
							<div class="col-md-6">
								<span class="title">Email Address</span>
								<p>
									<span class="tier">
										Required
									</span>
									Your email address, you'll need to verify your account, so make sure to use a real one.
								</p>
								<div class="input-group">
									<span class="input-group-addon">@@</span>
									@Html.TextBoxFor(v => v.Email, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "Email"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "Email").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Email</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.Email)
											</p>
										</div>
									}
								}
							</div>
						</section>

						<section class="input-section gamertag-section row">
							<div class="col-md-6">
								<span class="title">Gamertag</span>
								<p>
									<span class="tier">
										Optional
									</span>
									Your Xbox Live Gamertag, you can change this as often as you want.
								</p>
								<div class="input-group">
									<span class="input-group-addon">@@</span>
									@Html.TextBoxFor(v => v.Gamertag, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "Gamertag"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "Gamertag").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Gamertag</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.Gamertag)
											</p>
										</div>
									}
								}
							</div>
						</section>

						<section class="input-section invite-code-section row">
							<div class="col-md-6">
								<span class="title">Invitation Code</span>
								<p>
									<span class="tier">
										Required
									</span>
									While Branch Identities are being tested, you need an invitation code. Tweet me
									<a href="https://twitter.com/0xdeafcafe">0xdeafcafe</a>
									if you want a code.
								</p>
								<div class="input-group">
									<span class="input-group-addon">@@</span>
									@Html.TextBoxFor(v => v.InvitationCode, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "InvitationCode"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "InvitationCode").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Invitation Code</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.InvitationCode)
											</p>
										</div>
									}
								}
							</div>
						</section>

						<hr />

						<section class="input-section password-section row">
							<div class="col-md-6">
								<span class="title">Password</span>
								<p>
									<span class="tier">
										Required
									</span>
									Your password probally should be secure. It must at least 7 characters long, and contain atleast 2 of the following | Letters, Numbers, Symbols
								</p>
								<div class="input-group">
									<span class="input-group-addon">*</span>
									@Html.PasswordFor(v => v.Password, new { @class = "form-control" })
								</div>
							</div>
							<div class="col-md-6">
								@if (ViewContext.ViewData.ModelState.Any(x => x.Key == "Password"))
								{
									if (ViewContext.ViewData.ModelState.First(x => x.Key == "Password").Value.Errors.Any())
									{
										<div class="bs-callout bs-callout-danger" style="">
											<h4>Invalid Password</h4>
											<p class="reason">
												@Html.ValidationMessageFor(v => v.Password)
											</p>
										</div>
									}
								}
							</div>
						</section>
						
						<section class="input-section password-confirmation-section row">
							<div class="col-md-6">
								<span class="title">Password Confirmation</span>
								<p>
									<span class="tier">
										Required
									</span>
									Keep it the same as above
								</p>
								<div class="input-group">
									<span class="input-group-addon">*</span>
									@Html.PasswordFor(v => v.PasswordConfirm, new { @class = "form-control" })
								</div>
							</div>
						</section>

						<hr />

						<section class="input-section submit row">
							<input type="submit" class="btn btn-primary btn-lg" value="Sign Up" />
						</section>
					</div>
				</div>
			</div>
		</div>
	}
</div>
