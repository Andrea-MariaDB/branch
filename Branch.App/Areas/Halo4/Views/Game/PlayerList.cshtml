@using Branch.App.Areas.Halo4.Models
@using Branch.App.Helpers.Cryptography
@using Branch.App.Helpers.Razor
@using Branch.App.Helpers.Razor.Halo4
@using Branch.Core.Game.Halo4.Models._343.DataModels
@using Branch.Extenders
@model GamePlayerListViewModel
@{
	var team = Model.Team ?? new Game.Team
	{
		Name = "Players",
		PrimaryRgb = "#3d3d7c"
	};
	var players = Model.Players;
}

<div class="team col-md-12" style="border-color: @team.PrimaryRgb;">
	<div class="col-md-12 header">
		<div class="row">
			@if (team.EmblemImageUrl == null)
			{
				<div class="col-md-5 team-indicator">
					@(team.Name)
				</div>
			}
			else
			{
				<div class="col-md-5 team-indicator" style="background-image: url('@GeneralHelpers.GetRawAssetUrl(team.EmblemImageUrl)');">
					@(team.Name)
				</div>
			}
			<div class="col-md-1 score-indicator check-dat-paddin hidden-xs hidden-sm">Score</div>
			<div class="col-md-1 kills-indicator check-dat-paddin hidden-xs hidden-sm">Kills</div>
			<div class="col-md-1 deaths-indicator check-dat-paddin hidden-xs hidden-sm">Deaths</div>
			<div class="col-md-2 kd-indicator check-dat-paddin hidden-xs hidden-sm">K/D Ratio</div>
			<div class="col-md-1 assists-indicator check-dat-paddin hidden-xs hidden-sm">Assists</div>
			<div class="col-md-1 csr-indicator check-dat-paddin hidden-xs hidden-sm">CSR</div>
		</div>
	</div>

	<div class="team-players">
		@foreach (var player in players)
		{
			var ident = Sha1Crypto.ComputeHashToString(player.Gamertag).Remove(8);
			<div class="col-md-12" id="@ident" style="border-color: @team.PrimaryRgb;">
				<div class="desktop-view hidden-xs hidden-sm row">
					<div class="col-md-1 expander-indicator">
						<div class="expander-positioner">
							<a href="#" class="player-details-expander btn btn-default btn-large glyphicon glyphicon-chevron-down" data-ref="@ident"></a>
						</div>
					</div>
					@if (player.IsGuest)
					{
						<div class="col-md-1 visual-flair" style="background-color: @team.PrimaryRgb; background-image: url('https://emblems.svc.halowaypoint.com/Stats/emblem.ashx?s=48&0=0&1=21&2=2&3=2&amp;fi=48&amp;bi=0&amp;fl=1&amp;m=3');"></div>
					}
					else
					{
						<div class="col-md-1 visual-flair" style="background-color: @team.PrimaryRgb; background-image: url(@GeneralHelpers.GetRawAssetUrl(player.EmblemImageUrl, 48));"></div>
					}

					<div class="col-md-3 alphabetical-flair">
						@if (player.IsGuest)
						{
						@player.Gamertag
						<br /><strong>GEST</strong>
						}
						else
						{
						@Html.ActionLink(player.Gamertag, "Index", "ServiceRecord",
									 new { gamertag = player.Gamertag }, new Dictionary<string, object>())
						<br />
						<strong>@player.ServiceTag</strong>
						}
					</div>
					<div class="col-md-1 score-indicator check-dat-paddin">
						@player.PersonalScore
					</div>
					<div class="col-md-1 kills-indicator check-dat-paddin">
						@player.Kills
					</div>
					<div class="col-md-1 deaths-indicator check-dat-paddin">
						@player.Deaths
					</div>
					<div class="col-md-2 kd-indicator check-dat-paddin">
						@MathHelpers.CalculateKd(player.Kills, player.Deaths)
					</div>
					<div class="col-md-1 assists-indicator check-dat-paddin">
						@player.Assists
					</div>
					@if (player.IsGuest || player.SkillRank == null)
					{
					<div class="col-md-1 csr-indicator check-dat-paddin" style="background-image: url(@GeneralHelpers.GetCsrLevelUrl(0));"></div>
					}
					else
					{
					<div class="col-md-1 csr-indicator check-dat-paddin" style="background-image: url(@GeneralHelpers.GetCsrLevelUrl(player.SkillRank.CompetitiveSkillRank ?? 0));"></div>
					}
				</div>
				<div class="mobile-view visible-xs visible-sm row">
					<div class="expander-indicator">
						<div class="player-details-expander" data-ref="@ident">
							<div class="player-indicator">
								@if (player.IsGuest)
								{
									<div class="col-md-1 visual-flair" style="background-color: @team.PrimaryRgb; background-image: url('https://emblems.svc.halowaypoint.com/Stats/emblem.ashx?s=48&0=0&1=21&2=2&3=2&amp;fi=48&amp;bi=0&amp;fl=1&amp;m=3');">
										@player.Gamertag
										<br />
										<strong>GEST</strong>
									</div>
								}
								else
								{
									<div class="col-md-1 visual-flair" style="background-color: @team.PrimaryRgb; background-image: url(@GeneralHelpers.GetRawAssetUrl(player.EmblemImageUrl, 48));">
										@player.Gamertag
										<br />
										<strong>@player.ServiceTag</strong>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
				<div class="player-data collapsed" style="display: none;">
					<ul class="nav nav-tabs" style="margin-bottom: 15px;">
						<li class="active">
							<a id="tab-summary" href="#@ident-summary" data-toggle="tab">Summary</a>
						</li>
						<li>
							<a id="tab-weapons" href="#@ident-weapons" data-toggle="tab">Weapons</a>
						</li>
						@if (player.MedalStats.Any())
						{
						<li>
							<a id="tab-medals" href="#@ident-medals" data-toggle="tab">Medals</a>
						</li>
						}
						@if (player.EnemyStats.Any())
						{
						<li>
							<a id="tab-enemy" href="#@ident-enemys" data-toggle="tab">Enemies</a>
						</li>
						}
					</ul>

					<div class="player-stats tab-content">
						<div class="tab-pane fade in active summary" id="@ident-summary">
							<div class="row">
								<div class="col-md-6 hidden-sm hidden-xs player-model" style="background-image: url('@GeneralHelpers.GetPlayerModelUrl(GeneralHelpers.RemoveGuestIdentifier(player.Gamertag))')"></div>
								<div class="col-md-6">
									@if (player.IsGuest)
									{
										<h2>@player.Gamertag</h2>
										<h3 class="player-servicetag">GEST</h3>
									}
									else
									{
										<h2>
											@Html.ActionLink(player.Gamertag, "Index", "ServiceRecord",
												 new { gamertag = player.Gamertag }, new Dictionary<string, object>())
										</h2>
										<h3 class="player-servicetag">@player.ServiceTag</h3>
									}
									<hr />

									<h2>
										Score
									</h2>
									<ul class="list-group">
										<li class="list-group-item">
											<span class="badge">@player.PersonalScore</span>
											Personal Score
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Kills</span>
											Kills
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Deaths</span>
											Deaths
										</li>
										<li class="list-group-item">
											<span class="badge">@MathHelpers.CalculateKd(@player.Kills, @player.Deaths)</span>
											K/D Ratio
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Assists</span>
											Assists
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalMedals</span>
											Medals
										</li>
										<li class="list-group-item">
											<span class="badge">@(player.Betrayals + player.Suicides)</span>
											Penalities (Betrayals, Suicides, etc)
										</li>
										@if (!String.IsNullOrEmpty(player.FeaturedStatName))
										{
											<li class="list-group-item">
												<span class="badge">@player.FeaturedStatValue</span>
												@player.FeaturedStatName
											</li>
										}
									</ul>
									<hr />

									<h2>
										Meta
									</h2>
									<ul class="list-group">
										@if (player.KilledMostGamertag != null)
										{
											<li class="list-group-item">
												<span class="badge">
													@if (player.KilledMostGamertag == GeneralHelpers.RemoveGuestIdentifier(player.KilledMostGamertag))
													{
														// Not a Guest
														@Html.ActionLink(player.KilledMostGamertag, "Index", "ServiceRecord",
																 new { gamertag = player.KilledMostGamertag }, new Dictionary<string, object>())
													}
													else
													{
														@player.KilledMostGamertag
													}
													(@player.KilledMostCount)
												</span>
												Most Killed
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">Nobody</span>
												Most Killed
											</li>
										}
										@if (player.KilledByMostGamertag != null)
										{
											<li class="list-group-item">
												<span class="badge">
													@if (player.KilledByMostGamertag == GeneralHelpers.RemoveGuestIdentifier(player.KilledByMostGamertag))
													{
														// Not a Guest
														@Html.ActionLink(player.KilledByMostGamertag, "Index", "ServiceRecord",
																  new { gamertag = player.KilledByMostGamertag }, new Dictionary<string, object>())
													}
													else
													{
														@player.KilledByMostGamertag
													}
													(@player.KilledByMostCount)
												</span>
												Most Killed By
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">Nobody</span>
												Most Killed By
											</li>
										}
										<li class="list-group-item">
											<span class="badge">@player.AverageKillDistance Meters</span>
											Average Kill Distance
										</li>
										<li class="list-group-item">
											<span class="badge">@player.AverageDeathDistance Meters</span>
											Average Death Distance
										</li>
									</ul>
									<hr />
								</div>

								<div class="col-md-6">
									<h2>
										Medals
									</h2>
									<ul class="list-group">
										<li class="list-group-item">
											<span class="badge">@player.TotalKillMedals</span>
											Kill Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalBonusMedals</span>
											Bonus Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalAssistMedals</span>
											Assist Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalSpreeMedals</span>
											Spree Medals Earned
										</li>
										<li class="list-group-item">
											<span class="badge">@player.TotalModeMedals</span>
											Mode Medals Earned
										</li>
									</ul>
								</div>
								<div class="col-md-6">
									<h2>
										Player
									</h2>
									<ul class="list-group">
										@if (player.SkillRank == null)
										{
											<li class="list-group-item">
												<span class="badge">0</span>
												CSR
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">@(player.SkillRank.CompetitiveSkillRank ?? 0)</span>
												CSR
											</li>
										}
										@if (player.RankName == null)
										{
											<li class="list-group-item">
												<span class="badge">0</span>
												Rank
											</li>
										}
										else
										{
											<li class="list-group-item">
												<span class="badge">@player.RankName</span>
												Rank
											</li>
										}
										<li class="list-group-item">
											<span class="badge">
												@(player.IsCompleted ? "Finished the Fight" : "Did not Finish")
											</span>
											Completion Style
										</li>
										<li class="list-group-item">
											<span class="badge">
												@(player.JoinedInProgress ? "Joined in Progress" : "Played from the Start")
											</span>
											Deployment Style
										</li>
										<li class="list-group-item">
											<span class="badge">@player.Standing</span>
											Standing
										</li>
									</ul>
								</div>
							</div>
						</div>
						<div class="tab-pane fade in weapons" id="@ident-weapons">
							@{
								var weaponGraphIdent = string.Format("player-weapons-{0}", ident);
							}
							<div class="graph-container hidden-xs">
								<!-- Graphs Will Return! -->
								<div id="@weaponGraphIdent" style="height: 250px; width: 700px; display: none;">
								</div>
							</div>

							<h2>All Weapons</h2>
							<hr />
							<table class="table weapons">
								<thead>
									<tr>
										<th>Weapon</th>
										<th>Kills</th>
										<th>Headshots</th>
										<th>Deaths</th>
										<th>Penalties</th>
										<th>Spread</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var weaponStat in player.DamageTypeStats.OrderByDescending(w => MathHelpers.CalculateSpread(w.Kills, w.Deaths, new[] { w.Betrayals, w.Suicides })))
									{
									<tr>
										<td>
											<a href="#" role="tooltip" title="@weaponStat.Name">
												<img alt="@weaponStat.Name"
													 src="@GeneralHelpers.GetRawAssetUrl(weaponStat.ImageUrl)" />
											</a>
										</td>
										<td>
											@weaponStat.Kills
										</td>
										<td>
											@weaponStat.Headshots
										</td>
										<td>
											@weaponStat.Deaths
										</td>
										<td>
											@(weaponStat.Betrayals + weaponStat.Suicides)
										</td>
										<td>
											@MathHelpers.CalculateSpread(weaponStat.Kills, weaponStat.Deaths, new[] { weaponStat.Betrayals, weaponStat.Suicides })
										</td>
									</tr>
									}
								</tbody>
							</table>
						</div>
						@if (player.MedalStats.Any())
						{
							<div class="tab-pane fade in medals" id="@ident-medals">
								@{
									var medalGraphIdent = string.Format("player-medals-{0}", ident);
								}
								<div class="graph-container hidden-xs">
									<!-- Graphs Will Return! -->
									<div id="@medalGraphIdent" style="height: 250px; width: 700px; display: none;"></div>
								</div>


								<!-- Medal View Data Processing -->
								@{
									var sortedMedals = player.MedalStats.OrderByDescending(m => m.TotalMedals);
									var topMedals = new Dictionary<CommonModels.MedalStat, MetadataModels.Medal>();
									var allMedals = new Dictionary<MetadataModels.MedalClass, Dictionary<CommonModels.MedalStat, MetadataModels.Medal>>();

									// woah, alot of medal calculation
									foreach (var medalClass in GlobalStorage.H4Manager.Metadata.MedalsMetadata.MedalClasses)
									{
										if (medalClass == null)
										{
											continue;
										}

										var medalContainer =
											new Dictionary<CommonModels.MedalStat, MetadataModels.Medal>
												(new Dictionary<CommonModels.MedalStat, MetadataModels.Medal>());

										foreach (var sortedMedal in sortedMedals.Where(m => m.ClassId == medalClass.Id))
										{
											var medal = MetadataHelpers.GetMedal(sortedMedal.Id);
											medalContainer.Add(sortedMedal, medal);
											foreach (var topMedalId in player.TopMedalIds.Where(topMedalId => topMedalId == sortedMedal.Id))
											{
												topMedals.Add(sortedMedal, medal);
											}
										}

										allMedals.Add(medalClass, medalContainer);
									}
								}

								@if (topMedals.Any())
								{
								<h2>Top Medals</h2>
								<hr />
								<div class="row" id="top-medals" style="width: @(topMedals.Count() * (100 + 20 + 20))px;">
									@foreach (var medal in topMedals)
										{
										<div class="entry">
											<div class="medal" role="tooltip" title="@medal.Value.Name" style="background-image: url(@GeneralHelpers.GetRawAssetUrl(medal.Value.ImageUrl, "large"))"></div>
											<div class="count">
												@medal.Key.TotalMedals
											</div>
											<div class="earned">Earned</div>
										</div>
										}
									<div class="clearfix"></div>
								</div>
								}

								@{
								var userHasFuckallMedals = true;
								foreach (var medal in allMedals.Where(medal => medal.Value.Any()))
								{
									userHasFuckallMedals = false;
								}
								}

								@if (!userHasFuckallMedals)
								{
								<h2>All Medals</h2>
								<hr />
								<div class="row" id="all-medals">
									<ul class="nav nav-tabs">
										@{
									var firstEntry = true;
										}

										@foreach (var medalClassGroup in allMedals.Where(medalClassGroup => medalClassGroup.Value.Any()))
											{
											<li class="@(firstEntry ? "active" : "")">
												<a href="#medal-tier-@medalClassGroup.Key.Name.ToSlug()-@ident" data-toggle="tab">
													@medalClassGroup.Key.Name
												</a>
											</li>

												firstEntry = false;
											}
									</ul>


									<div id='player-medals' class="tab-content">
										@{
									firstEntry = true;
										}
										@foreach (var medalClassGroup in allMedals.Where(medalClassGroup => medalClassGroup.Value.Any()))
											{
											<div class="tab-pane fade in @(firstEntry ? "active" : "")" id="medal-tier-@medalClassGroup.Key.Name.ToSlug()-@ident">
												@foreach (var medal in medalClassGroup.Value)
													{
													<div class="col-md-12 medal-entry row">
														<div class="medal" style="background-image: url('@GeneralHelpers.GetRawAssetUrl(medal.Key.ImageUrl)')"></div>
														<div class="description">
															<span class="name">@medal.Value.Name</span>
															<br />
															@medal.Value.Description
														</div>
														<div class="count">
															<span class="integer">@medal.Key.TotalMedals</span>
															<br />
															<span class="in-dick-ator">earned</span>
														</div>
													</div>
													<hr />
													}
											</div>
													firstEntry = false;
											}
									</div>
								</div>
								}
							</div>
						}
						@if (player.EnemyStats.Any())
						{
							<div class="tab-pane fade in enemies" id="@ident-enemys">
								@{
									var enemyGraphIdent = string.Format("player-enemy-{0}", ident);
								}
								<div class="graph-container hidden-xs">
									<!-- Graphs Will Return! -->
									<div id="@enemyGraphIdent" style="height: 250px; width: 700px; display: none;"></div>
								</div>

								<h2>All Enemies</h2>
								<hr />

								<div class="row">
									@foreach (var enemyStat in player.EnemyStats.OrderByDescending(e => e.Kills))
									{
										var enemyUuid = string.Format("{0}-{1:X}", ident, enemyStat.EnemyId);
										var enemy = MetadataHelpers.GetEnemy(enemyStat.EnemyId);
										var enemyClass = MetadataHelpers.GetEnemyClass(enemy.ClassId);
										var enemyType = MetadataHelpers.GetEnemyType(enemy.TypeId);
										var enemyFaction = MetadataHelpers.GetFaction(enemy.FactionId);
										
										<div class="col-md-12 enemy-entry row">
											<div class="enemy-image col-md-1" style="background-image: url('@GeneralHelpers.GetRawAssetUrl(enemy.ImageUrl, "large")')"></div>
											<div class="enemy-content col-md-8">
												<span class="name">@enemy.Name</span>
												<ul class="nav nav-tabs" style="margin-top: 15px;">
													<li class="active">
														<a id="tab-stats" href="#@enemyUuid-stats" data-toggle="tab">Stats</a>
													</li>
													<li>
														<a id="tab-info" href="#@enemyUuid-info" data-toggle="tab">Information</a>
													</li>
													<li>
														<a id="tab-desc" href="#@enemyUuid-desc" data-toggle="tab">Descirption</a>
													</li>
												</ul>
												<div class="enemy-stats tab-content">
													<div class="tab-pane fade in active statistics" id="@enemyUuid-stats">
														<span>
															<strong>
																Kills:
															</strong>
															@enemyStat.Kills
														</span>
														<br />
														<span>
															<strong>
																Deaths:
															</strong>
															@enemyStat.Deaths
														</span>
														<br />
														<span>
															<strong>
																Average Kill Distance:
															</strong>
															@enemyStat.AverageKillDistance Meters
														</span>
														<br />
														<span>
															<strong>
																Average Death Distance:
															</strong>
															@enemyStat.AverageDeathDistance Meters
														</span>
													</div>
													<div class="tab-pane fade in information" id="@enemyUuid-info">
														<span>
															<strong>
																Class:
															</strong>
															@enemyClass.Name
														</span>
														<br />
														<span>
															<strong>
																Type:
															</strong>
															@enemyType.Name
														</span>
														<br />
														<span>
															<strong>
																Faction:
															</strong>
															@enemyFaction.Name
														</span>
													</div>
													<div class="tab-pane fade in description" id="@enemyUuid-desc">
														@enemy.Description
													</div>
												</div>
											</div>
											<div class="count hidden-xs hidden-sm col-md-2">
												<span class="integer">@enemyStat.Kills</span>
												<br />
												<span class="in-dick-ator">killed</span>
											</div>
										</div>
										<hr />
									}
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		}
	</div>
</div>

